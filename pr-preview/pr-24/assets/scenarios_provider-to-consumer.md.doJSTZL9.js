import{_ as c,C as p,c as d,o as s,a2 as o,b as a,w as t,a as n,G as i,a3 as l}from"./chunks/framework.CYgzZaPD.js";const D=JSON.parse('{"title":"Provider to Consumer (P2C)","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"scenarios/provider-to-consumer.md","filePath":"scenarios/provider-to-consumer.md"}'),u={name:"scenarios/provider-to-consumer.md"};function b(h,e,A,g,m,P){const r=p("Mermaid");return s(),d("div",null,[e[4]||(e[4]=o('<h1 id="provider-to-consumer-p2c" tabindex="-1">Provider to Consumer (P2C) <a class="header-anchor" href="#provider-to-consumer-p2c" aria-label="Permalink to &quot;Provider to Consumer (P2C)&quot;">​</a></h1><p>This section describes high-level scenarios of how the <strong>Platform Mesh</strong> enables secure, declarative, and flexible <strong>Provider to Consumer</strong> (P2C) interactions across clusters, organizations, and teams. It builds on concepts such as the <a href="./../overview/account-model.html"><strong>Account Model</strong></a>, <a href="./../overview/control-planes.html"><strong>Control Planes</strong></a>, and <a href="./../overview/design-decision.html"><strong>Managed Service Provider Pattern</strong></a> to unify service exchange.</p><h2 id="kube-to-kube" tabindex="-1">Kube to Kube <a class="header-anchor" href="#kube-to-kube" aria-label="Permalink to &quot;Kube to Kube&quot;">​</a></h2><h3 id="problem-description" tabindex="-1">Problem Description <a class="header-anchor" href="#problem-description" aria-label="Permalink to &quot;Problem Description&quot;">​</a></h3><p>In a direct <strong>provider to consumer</strong> setting, a provider wants to transfer technical information in a secure way to a consumer for a given service.</p><ul><li>The <strong>Provider</strong> must expose as little internal detail as possible.</li><li>The <strong>Consumer</strong> should be able to automatically discover and consume instances of the service.</li><li>Both parties must rely on a secure, declarative, contract-driven interaction.</li></ul><h3 id="solution" tabindex="-1">Solution <a class="header-anchor" href="#solution" aria-label="Permalink to &quot;Solution&quot;">​</a></h3><p>The provider can offer a <strong>kube-bind backend</strong>, allowing the consumer to:</p><ul><li>Authenticate with OIDC.</li><li>Bind the service’s CRD (or any KRM API) into their own cluster.</li><li>Automatically receive service instances and secrets.</li></ul>',9)),(s(),a(l,null,{default:t(()=>[i(r,{id:"mermaid-55",class:"mermaid",graph:"flowchart%20TD%0A%0Asubgraph%20Provider%0A%20%20%20%20origCRD%5BService%20CRD%5D%0A%20%20%20%20copyInstance%5BService%20Instance%5D%0A%20%20%20%20origSecret%5BService%20Secret%5D%0Aend%0A%0AorigCRD%20-.-%3E%20copyCRD%0AcopyCRD%20-.-%3E%20consumerInstance%0AconsumerInstance%20--%3E%20copyInstance%0AcopyInstance%20-.-%3E%20origSecret%0AorigSecret%20--%3E%20copySecret%0A%0Asubgraph%20Consumer%0A%20%20%20%20copyCRD%5BService%20CRD%5D%0A%20%20%20%20consumerInstance%5BService%20Instance%5D%0A%20%20%20%20copySecret%5BService%20Secret%5D%0Aend%0A"})]),fallback:t(()=>[...e[0]||(e[0]=[n(" Loading... ",-1)])]),_:1})),e[5]||(e[5]=o('<hr><h2 id="kube-to-kcp-to-kube" tabindex="-1">Kube to KCP to Kube <a class="header-anchor" href="#kube-to-kcp-to-kube" aria-label="Permalink to &quot;Kube to KCP to Kube&quot;">​</a></h2><h3 id="problem-description-1" tabindex="-1">Problem Description <a class="header-anchor" href="#problem-description-1" aria-label="Permalink to &quot;Problem Description&quot;">​</a></h3><p>Within an <strong>Internal Developer Platform (IDP)</strong> setup, multiple teams act both as providers and consumers.</p><ul><li><strong>Database Team (DB)</strong> offers a Postgres service.</li><li><strong>Observability Team (Obs)</strong> wants to consume Postgres for their Elastic service.</li><li><strong>Webshop Team (WS)</strong> wants to consume both Postgres and Elastic services for their applications.</li></ul><p>This creates a mesh of dependencies where teams provide and consume services through shared contracts.</p>',6)),(s(),a(l,null,{default:t(()=>[i(r,{id:"mermaid-86",class:"mermaid",graph:"flowchart%20LR%0A%0Asubgraph%20KCP%0A%20%20%20%20subgraph%20KCP_DB%5Broot%3Ateam%3Adatabase%5D%0A%20%20%20%20%20%20%20%20PGExport%5BPostgres%20APIExport%5D%0A%20%20%20%20end%0A%0A%20%20%20%20subgraph%20KCP_Obs%5Broot%3Ateam%3Aobservability%5D%0A%20%20%20%20%20%20%20%20PGBindingObs%5BPostgres%20APIBinding%5D%0A%20%20%20%20%20%20%20%20ElasticExport%5BElastic%20APIExport%5D%0A%20%20%20%20end%0A%20%20%20%20PGExport%20-.-%3E%20PGBindingObs%0A%0A%20%20%20%20subgraph%20KCP_WS%5Broot%3Ateam%3Awebshop%5D%0A%20%20%20%20%20%20%20%20ElasticBinding%5BElastic%20APIBinding%5D%0A%20%20%20%20%20%20%20%20PGBindingWS%5BPostgres%20APIBinding%5D%0A%20%20%20%20end%0A%20%20%20%20PGExport%20-.-%3E%20PGBindingWS%0A%20%20%20%20ElasticExport%20-.-%3E%20ElasticBinding%0Aend%0A%0Asubgraph%20DBCompute%5BDatabase%20Compute%20Cluster%5D%0A%20%20%20%20PGCRD%5BPostgres%20CRD%5D%0A%20%20%20%20PGCRD%20-.-%3E%20%7Capi-syncagent%7C%20PGExport%0Aend%0A%0Asubgraph%20ObsCompute%5BObservability%20Compute%20Cluster%5D%0A%20%20%20%20ElasticCRD%5BElastic%20CRD%5D%0A%20%20%20%20ElasticCRD%20-.-%3E%20%7Capi-syncagent%7C%20ElasticExport%0Aend%0A%0Asubgraph%20WSCompute%5BWorkshop%20Compute%20Cluster%5D%0A%20%20%20%20Webshop%0Aend%0A"})]),fallback:t(()=>[...e[1]||(e[1]=[n(" Loading... ",-1)])]),_:1})),e[6]||(e[6]=o('<p>Teams use GitOps and declarative manifests to manage components in their respective clusters.</p><h3 id="tools-solution" tabindex="-1">Tools Solution <a class="header-anchor" href="#tools-solution" aria-label="Permalink to &quot;Tools Solution&quot;">​</a></h3><p>The <strong>Observability Team</strong> leverages <strong>KRO (Kubernetes Resource Orchestrator)</strong> to:</p><ul><li>Instantiate Elastic services.</li><li>Pull Postgres CRDs from their APIBinding using <strong>kube-bind</strong>.</li><li>Define resource graphs that create Postgres instances using the pulled CRDs.</li><li>The ordered Postgres instances are mirrored back to KCP by <strong>kube-bind</strong>.</li></ul>',4)),(s(),a(l,null,{default:t(()=>[i(r,{id:"mermaid-118",class:"mermaid",graph:"flowchart%20TD%0A%0Asubgraph%20KCP%0A%20%20%20%20subgraph%20KCP_DB%5Broot%3Ateam%3Adatabase%5D%0A%20%20%20%20%20%20%20%20PGExport%5BPostgres%20APIExport%5D%0A%20%20%20%20end%0A%0A%20%20%20%20subgraph%20KCP_Obs%5Broot%3Ateam%3Aobservability%5D%0A%20%20%20%20%20%20%20%20ElasticExport%5BElastic%20APIExport%5D%0A%20%20%20%20%20%20%20%20PGBindingObs%5BPostgres%20APIBinding%5D%0A%20%20%20%20%20%20%20%20PGInstanceObsWs%5BObs%20Postgres%20Instance%5D%0A%20%20%20%20end%0A%20%20%20%20PGExport%20-.-%3E%20PGBindingObs%0Aend%0A%0Asubgraph%20DBCompute%5BDatabase%20Compute%20Cluster%5D%0A%20%20%20%20PGCRD%5BPostgres%20CRD%5D%0A%20%20%20%20PGCRD%20-.-%3E%20%7Capi-syncagent%7C%20PGExport%0A%20%20%20%20PGInstanceObsReal%5BObs%20Postgres%20Instance%5D%0A%20%20%20%20PGInstanceObsWs%20--%3E%20PGInstanceObsReal%0Aend%0A%0Asubgraph%20ObsCompute%5BObservability%20Compute%20Cluster%5D%0A%20%20%20%20ElasticCRD%5BElastic%20CRD%5D%0A%20%20%20%20ElasticCRD%20-.-%3E%20%7Capi-syncagent%7C%20ElasticExport%0A%0A%20%20%20%20PGCRDObs%5BPostgres%20CRD%5D%0A%20%20%20%20PGBindingObs%20-.-%3E%20%7Ckube-bind%7C%20PGCRDObs%0A%0A%20%20%20%20ElasticInstance%0A%20%20%20%20ElasticCRD%20-.-%3E%20ElasticInstance%0A%0A%20%20%20%20PGInstanceObs%5BObs%20Postgres%20Instance%5D%0A%20%20%20%20ElasticInstance%20-.-%3E%20PGInstanceObs%0A%20%20%20%20PGCRDObs%20-.-%3E%20PGInstanceObs%0A%0A%20%20%20%20PGInstanceObs%20--%3E%20%7Ckube-bind%7C%20PGInstanceObsWs%0Aend%0A"})]),fallback:t(()=>[...e[2]||(e[2]=[n(" Loading... ",-1)])]),_:1})),e[7]||(e[7]=o('<h3 id="operator-solution" tabindex="-1">Operator Solution <a class="header-anchor" href="#operator-solution" aria-label="Permalink to &quot;Operator Solution&quot;">​</a></h3><p>The <strong>Webshop Team</strong> uses its own <strong>operator</strong> built with <a href="https://github.com/kubernetes-sigs/multicluster-runtime/" target="_blank" rel="noreferrer"><strong>multicluster-runtime</strong></a>:</p><ul><li>Webshop definitions live in their KCP workspace.</li><li>Operator deploys workloads across clusters.</li><li>Operator consumes Postgres and Elastic bindings.</li></ul>',3)),(s(),a(l,null,{default:t(()=>[i(r,{id:"mermaid-142",class:"mermaid",graph:"flowchart%20LR%0A%0Asubgraph%20KCP%0A%20%20%20%20subgraph%20KCP_DB%5Broot%3Ateam%3Adatabase%5D%0A%20%20%20%20%20%20%20%20PGExport%5BPostgres%20APIExport%5D%0A%20%20%20%20end%0A%0A%20%20%20%20subgraph%20KCP_Obs%5Broot%3Ateam%3Aobservability%5D%0A%20%20%20%20%20%20%20%20ElasticExport%5BElastic%20APIExport%5D%0A%20%20%20%20end%0A%0A%20%20%20%20subgraph%20KCP_WS%5Broot%3Ateam%3Awebshop%5D%0A%20%20%20%20%20%20%20%20ElasticBinding%5BElastic%20APIBinding%5D%0A%20%20%20%20%20%20%20%20PGBinding%5BPostgres%20APIBinding%5D%0A%0A%20%20%20%20%20%20%20%20WebshopCRD%5BWebshop%20CRD%5D%0A%20%20%20%20%20%20%20%20WebshopInstance%5BWebshop%20Instance%5D%0A%20%20%20%20%20%20%20%20WebshopCRD%20-.-%3E%20WebshopInstance%0A%20%20%20%20%20%20%20%20WebshopInstanceDB%5BWebshop%20Instance%20PG%5D%0A%20%20%20%20%20%20%20%20WebshopInstanceDB%20--%3E%20PGBinding%0A%20%20%20%20%20%20%20%20WebshopInstanceElastic%5BWebshop%20Instance%20Elastic%5D%0A%20%20%20%20%20%20%20%20WebshopInstanceElastic%20--%3E%20ElasticBinding%0A%20%20%20%20end%0A%0A%20%20%20%20PGBinding%20-.-%3E%20PGExport%0A%20%20%20%20ElasticBinding%20-.-%3E%20ElasticExport%0Aend%0A%0Asubgraph%20WSCompute%5BWorkshop%20Compute%20Cluster%5D%0A%20%20%20%20WebshopOperator%5BWebshop%20Operator%5D%0A%20%20%20%20Webshop%0Aend%0AWebshopOperator%20-.-%3E%20WebshopInstance%0AWebshopOperator%20--%3E%20WebshopInstanceDB%0AWebshopOperator%20--%3E%20WebshopInstanceElastic%0AWebshopOperator%20--%3E%20Webshop%0A"})]),fallback:t(()=>[...e[3]||(e[3]=[n(" Loading... ",-1)])]),_:1})),e[8]||(e[8]=o('<p>The operator ensures database and observability service data flows securely into webshop workloads.</p><hr><h2 id="how-this-fits-into-platform-mesh" tabindex="-1">How This Fits Into Platform Mesh <a class="header-anchor" href="#how-this-fits-into-platform-mesh" aria-label="Permalink to &quot;How This Fits Into Platform Mesh&quot;">​</a></h2><p>The above flows illustrate how <strong>Provider to Consumer</strong> interactions are standardized in the Platform Mesh:</p><ul><li><strong>Providers</strong> expose declarative APIs using <a href="./../overview/control-planes.html"><strong>APIExports</strong></a>.</li><li><strong>Consumers</strong> bind to those APIs using <strong>APIBindings</strong>, gaining seamless access through the <a href="./../overview/account-model.html"><strong>Account Model</strong></a>.</li><li><a href="./../overview/control-planes.html"><strong>Control planes</strong></a> reconcile declarative manifests into real-world capabilities.</li><li><strong>Operators and orchestration tools</strong> (kube-bind, KRO, multicluster-runtime) implement automation across boundaries.</li></ul><p>This creates a secure, flexible, and decoupled ecosystem where services can be:</p><ul><li>Exposed minimally.</li><li>Discovered and consumed declaratively.</li><li>Composed across organizational or cluster boundaries.</li><li>Governed through the <a href="./../overview/account-model.html"><strong>Account Model</strong></a> and <a href="./../overview/design-decision.html"><strong>Managed Service Provider pattern</strong></a>.</li></ul><p>Ultimately, Platform Mesh provides the <strong>P2C fabric</strong> for multi-team, multi-cluster, and multi-organization service interactions.</p>',8))])}const E=c(u,[["render",b]]);export{D as __pageData,E as default};
